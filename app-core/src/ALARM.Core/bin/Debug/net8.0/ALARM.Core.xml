<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ALARM.Core</name>
    </assembly>
    <members>
        <member name="T:ALARM.Core.Interfaces.IAutoCadService">
            <summary>
            Abstraction for AutoCAD Map 3D integration services
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAutoCadService.GetActiveDocumentAsync">
            <summary>
            Gets the current active document
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAutoCadService.OpenDrawingAsync(System.String)">
            <summary>
            Opens a drawing file
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAutoCadService.CreateNewDrawingAsync(System.String)">
            <summary>
            Creates a new drawing
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAutoCadService.GetVersion">
            <summary>
            Gets the application version information
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAutoCadService.IsAvailableAsync">
            <summary>
            Checks if AutoCAD is running and available
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IAcadDocument">
            <summary>
            Represents an AutoCAD document
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IAcadDocument.Name">
            <summary>
            Document name
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IAcadDocument.FilePath">
            <summary>
            Full file path
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IAcadDocument.IsDirty">
            <summary>
            Indicates if document has unsaved changes
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IAcadDocument.Database">
            <summary>
            Gets the database service for this document
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IAcadDocument.Selection">
            <summary>
            Gets the selection service for this document
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IAcadDocument.Layers">
            <summary>
            Gets the layer service for this document
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadDocument.SaveAsync">
            <summary>
            Saves the document
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadDocument.SaveAsAsync(System.String)">
            <summary>
            Saves the document to a specific path
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadDocument.CloseAsync(System.Boolean)">
            <summary>
            Closes the document
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadDocument.StartTransactionAsync">
            <summary>
            Starts a new transaction
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IAcadTransaction">
            <summary>
            Represents an AutoCAD database transaction
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadTransaction.CommitAsync">
            <summary>
            Commits the transaction
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadTransaction.AbortAsync">
            <summary>
            Aborts the transaction
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadTransaction.GetEntityAsync(ALARM.Core.Interfaces.ObjectId)">
            <summary>
            Gets an entity by its object ID
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadTransaction.AddEntityAsync(ALARM.Core.Interfaces.IAcadEntity,System.String)">
            <summary>
            Adds an entity to the database
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadTransaction.UpdateEntityAsync(ALARM.Core.Interfaces.IAcadEntity)">
            <summary>
            Updates an entity in the database
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadTransaction.DeleteEntityAsync(ALARM.Core.Interfaces.ObjectId)">
            <summary>
            Deletes an entity from the database
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IAcadDatabase">
            <summary>
            Abstraction for AutoCAD database operations
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadDatabase.GetLayersAsync">
            <summary>
            Gets all layers in the database
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadDatabase.GetBlocksAsync">
            <summary>
            Gets all blocks in the database
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadDatabase.QueryEntitiesAsync(ALARM.Core.Interfaces.EntityQuery)">
            <summary>
            Queries entities by criteria
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IAcadDatabase.GetStatsAsync">
            <summary>
            Gets database statistics
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ObjectId">
            <summary>
            Represents a unique object identifier in AutoCAD
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IAcadEntity">
            <summary>
            Base interface for AutoCAD entities
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IAcadLayer">
            <summary>
            Represents an AutoCAD layer
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IAcadBlock">
            <summary>
            Represents an AutoCAD block definition
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.EntityQuery">
            <summary>
            Query criteria for entity searches
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.BoundingBox">
            <summary>
            Represents a 3D bounding box
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.BoundingBox.#ctor(ALARM.Core.Interfaces.Point3D,ALARM.Core.Interfaces.Point3D)">
            <summary>
            Represents a 3D bounding box
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.Point3D">
            <summary>
            Represents a 3D point
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Represents a 3D point
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.DatabaseStats">
            <summary>
            Database statistics
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.DatabaseStats.#ctor(System.Int32,System.Int32,System.Int32,System.Int64,System.DateTime)">
            <summary>
            Database statistics
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ILayerService">
            <summary>
            Abstraction for AutoCAD layer management operations
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.GetAllLayersAsync">
            <summary>
            Gets all layers in the current drawing
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.GetLayerAsync(System.String)">
            <summary>
            Gets a layer by name
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.CreateLayerAsync(System.String,ALARM.Core.Interfaces.LayerProperties)">
            <summary>
            Creates a new layer
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.UpdateLayerAsync(ALARM.Core.Interfaces.IAcadLayer)">
            <summary>
            Updates an existing layer
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.DeleteLayerAsync(System.String,System.Boolean)">
            <summary>
            Deletes a layer (if not in use)
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.SetCurrentLayerAsync(System.String)">
            <summary>
            Sets the current active layer
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.GetCurrentLayerAsync">
            <summary>
            Gets the current active layer
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.LayerExistsAsync(System.String)">
            <summary>
            Checks if a layer exists
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.GetEntitiesOnLayerAsync(System.String)">
            <summary>
            Gets entities on a specific layer
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.MoveEntitiesToLayerAsync(System.Collections.Generic.IEnumerable{ALARM.Core.Interfaces.ObjectId},System.String)">
            <summary>
            Moves entities to a different layer
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.SetLayerFrozenAsync(System.String,System.Boolean)">
            <summary>
            Freezes/thaws layers
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.SetLayerLockedAsync(System.String,System.Boolean)">
            <summary>
            Locks/unlocks layers
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.SetLayerVisibleAsync(System.String,System.Boolean)">
            <summary>
            Shows/hides layers
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.GetLayerStatsAsync(System.String)">
            <summary>
            Gets layer usage statistics
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ILayerService.PurgeUnusedLayersAsync">
            <summary>
            Purges unused layers
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.LayerProperties">
            <summary>
            Properties for creating or updating layers
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.LayerProperties.Color">
            <summary>
            Layer color (AutoCAD color index or true color)
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.LayerProperties.LineType">
            <summary>
            Line type name
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.LayerProperties.LineWeight">
            <summary>
            Line weight
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.LayerProperties.Transparency">
            <summary>
            Transparency (0-255, 0 = opaque)
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.LayerProperties.IsPlottable">
            <summary>
            Whether layer is plottable
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.LayerProperties.Description">
            <summary>
            Layer description
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.LayerProperties.CustomProperties">
            <summary>
            Custom properties
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.LineWeight">
            <summary>
            Line weight enumeration
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.LayerStats">
            <summary>
            Layer statistics
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.LayerStats.#ctor(System.String,System.Int32,System.Int64,System.DateTime,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Layer statistics
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.LayerState">
            <summary>
            Layer state for saving/restoring layer configurations
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.LayerStateInfo">
            <summary>
            Individual layer state information
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.LayerStateInfo.#ctor(System.Boolean,System.Boolean,System.Boolean,System.String,System.String,ALARM.Core.Interfaces.LineWeight,System.Byte,System.Boolean)">
            <summary>
            Individual layer state information
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ILayerEvents">
            <summary>
            Layer management events
            </summary>
        </member>
        <member name="E:ALARM.Core.Interfaces.ILayerEvents.LayerCreated">
            <summary>
            Raised when a layer is created
            </summary>
        </member>
        <member name="E:ALARM.Core.Interfaces.ILayerEvents.LayerDeleted">
            <summary>
            Raised when a layer is deleted
            </summary>
        </member>
        <member name="E:ALARM.Core.Interfaces.ILayerEvents.LayerModified">
            <summary>
            Raised when a layer is modified
            </summary>
        </member>
        <member name="E:ALARM.Core.Interfaces.ILayerEvents.CurrentLayerChanged">
            <summary>
            Raised when the current layer changes
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.LayerEventArgs">
            <summary>
            Layer event arguments
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.LayerOperation">
            <summary>
            Layer operation types
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IOracleDataService">
            <summary>
            High-level Oracle data service abstraction
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.QueryAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes a query and returns results as a list of dynamic objects
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.QueryAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes a query and returns results as strongly-typed objects
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.QueryFirstOrDefaultAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes a query and returns the first result or default
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.QuerySingleAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes a query and returns a single result
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.ExecuteScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes a scalar query and returns the result
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.ExecuteAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes a non-query command and returns affected rows
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.ExecuteTransactionAsync(System.Collections.Generic.IEnumerable{ALARM.Core.Interfaces.SqlCommand},System.Threading.CancellationToken)">
            <summary>
            Executes multiple commands in a transaction
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.InsertAsync``1(``0,System.String,System.Threading.CancellationToken)">
            <summary>
            Inserts an entity and returns the number of affected rows
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.UpdateAsync``1(``0,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Updates an entity and returns the number of affected rows
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.DeleteAsync``1(System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes records matching the conditions
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.BulkInsertAsync``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Bulk inserts multiple entities
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.ExecuteStoredProcedureAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes a stored procedure
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.ExecuteStoredProcedureAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes a stored procedure and returns results as strongly-typed objects
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.GetTableMetadataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets table metadata
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.TableExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a table exists
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataService.GetSchemaInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Gets database schema information
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IOracleCommandBuilder">
            <summary>
            Oracle command builder for creating parameterized queries
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleCommandBuilder.Select(System.String[])">
            <summary>
            Creates a SELECT command builder
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleCommandBuilder.InsertInto(System.String)">
            <summary>
            Creates an INSERT command builder
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleCommandBuilder.Update(System.String)">
            <summary>
            Creates an UPDATE command builder
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleCommandBuilder.DeleteFrom(System.String)">
            <summary>
            Creates a DELETE command builder
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleCommandBuilder.Raw(System.String)">
            <summary>
            Creates a raw SQL command
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleCommandBuilder.StoredProcedure(System.String)">
            <summary>
            Creates a stored procedure command
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ISelectCommandBuilder">
            <summary>
            SELECT command builder
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IInsertCommandBuilder">
            <summary>
            INSERT command builder
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IUpdateCommandBuilder">
            <summary>
            UPDATE command builder
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IDeleteCommandBuilder">
            <summary>
            DELETE command builder
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ISqlCommand">
            <summary>
            SQL command interface
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IStoredProcedureCommand">
            <summary>
            Stored procedure command builder
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.SqlCommand">
            <summary>
            SQL command implementation
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.SortDirection">
            <summary>
            Sort direction enumeration
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.StoredProcedureResult">
            <summary>
            Stored procedure result
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.StoredProcedureResult`1">
            <summary>
            Strongly-typed stored procedure result
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.TableMetadata">
            <summary>
            Table metadata information
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ColumnMetadata">
            <summary>
            Column metadata information
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IndexMetadata">
            <summary>
            Index metadata information
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ForeignKeyMetadata">
            <summary>
            Foreign key metadata information
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.PrimaryKeyMetadata">
            <summary>
            Primary key metadata information
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.SchemaInfo">
            <summary>
            Database schema information
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IOracleService">
            <summary>
            Abstraction for Oracle database operations
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleService.ConnectionFactory">
            <summary>
            Gets a connection factory for creating database connections
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleService.CommandBuilder">
            <summary>
            Gets a command builder for creating parameterized commands
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleService.DataService">
            <summary>
            Gets a data service for high-level data operations
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleService.TestConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Tests database connectivity
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleService.GetDatabaseInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Gets database server information
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleService.PerformHealthCheckAsync(System.Threading.CancellationToken)">
            <summary>
            Executes a health check on the database
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IOracleConnectionFactory">
            <summary>
            Factory for creating Oracle database connections
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleConnectionFactory.CreateConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a new database connection
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleConnectionFactory.CreateConnectionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a connection with a specific connection string
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleConnectionFactory.GetConnectionStringInfo">
            <summary>
            Gets the default connection string (without sensitive data)
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleConnectionFactory.ValidateConnectionString(System.String)">
            <summary>
            Validates a connection string
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IOracleConnection">
            <summary>
            Abstraction for Oracle database connections
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleConnection.ConnectionStringInfo">
            <summary>
            Connection string (sensitive data masked)
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleConnection.State">
            <summary>
            Current connection state
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleConnection.ConnectionTimeout">
            <summary>
            Connection timeout in seconds
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleConnection.Database">
            <summary>
            Database name/service
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleConnection.ServerVersion">
            <summary>
            Server version
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleConnection.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Opens the connection
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleConnection.CloseAsync">
            <summary>
            Closes the connection
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleConnection.BeginTransactionAsync(ALARM.Core.Interfaces.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Begins a new transaction
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleConnection.CreateCommand">
            <summary>
            Creates a command for this connection
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleConnection.CreateCommand(System.String)">
            <summary>
            Creates a command with SQL text
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleConnection.TestAsync(System.Threading.CancellationToken)">
            <summary>
            Tests the connection
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IOracleTransaction">
            <summary>
            Abstraction for Oracle database transactions
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleTransaction.Connection">
            <summary>
            Connection associated with this transaction
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleTransaction.IsolationLevel">
            <summary>
            Isolation level of the transaction
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleTransaction.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Commits the transaction
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleTransaction.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            Rolls back the transaction
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleTransaction.CreateSavepointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a savepoint
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleTransaction.RollbackToSavepointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Rolls back to a savepoint
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IOracleCommand">
            <summary>
            Abstraction for Oracle database commands
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleCommand.CommandText">
            <summary>
            SQL command text
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleCommand.CommandType">
            <summary>
            Command type (Text, StoredProcedure, etc.)
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleCommand.CommandTimeout">
            <summary>
            Command timeout in seconds
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleCommand.Connection">
            <summary>
            Connection for this command
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleCommand.Transaction">
            <summary>
            Transaction for this command
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleCommand.Parameters">
            <summary>
            Command parameters
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the command and returns the number of affected rows
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the command and returns a scalar value
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the command and returns a data reader
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleCommand.ExecuteReaderAsync(ALARM.Core.Interfaces.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            Executes the command and returns a data reader with specific behavior
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleCommand.PrepareAsync(System.Threading.CancellationToken)">
            <summary>
            Prepares the command for execution
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleCommand.Cancel">
            <summary>
            Cancels command execution
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IOracleParameterCollection">
            <summary>
            Collection of Oracle command parameters
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleParameterCollection.Count">
            <summary>
            Number of parameters
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleParameterCollection.Item(System.Int32)">
            <summary>
            Gets parameter by index
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleParameterCollection.Item(System.String)">
            <summary>
            Gets parameter by name
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleParameterCollection.Add(ALARM.Core.Interfaces.IOracleParameter)">
            <summary>
            Adds a parameter
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds a parameter with name and value
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleParameterCollection.Add(System.String,ALARM.Core.Interfaces.OracleDbType,System.Object)">
            <summary>
            Adds a parameter with name, type, and value
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleParameterCollection.Remove(ALARM.Core.Interfaces.IOracleParameter)">
            <summary>
            Removes a parameter
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleParameterCollection.Remove(System.String)">
            <summary>
            Removes a parameter by name
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleParameterCollection.Clear">
            <summary>
            Clears all parameters
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleParameterCollection.Contains(System.String)">
            <summary>
            Checks if parameter exists
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IOracleParameter">
            <summary>
            Oracle command parameter
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleParameter.ParameterName">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleParameter.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleParameter.DbType">
            <summary>
            Oracle database type
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleParameter.Direction">
            <summary>
            Parameter direction (Input, Output, etc.)
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleParameter.Size">
            <summary>
            Parameter size
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleParameter.Precision">
            <summary>
            Precision for numeric types
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleParameter.Scale">
            <summary>
            Scale for numeric types
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleParameter.IsNullable">
            <summary>
            Whether parameter can be null
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IOracleDataReader">
            <summary>
            Oracle data reader abstraction
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleDataReader.FieldCount">
            <summary>
            Number of fields in the current record
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleDataReader.HasRows">
            <summary>
            Whether reader has rows
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleDataReader.IsClosed">
            <summary>
            Whether reader is closed
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleDataReader.RecordsAffected">
            <summary>
            Number of records affected
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleDataReader.Item(System.Int32)">
            <summary>
            Gets value by column index
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.IOracleDataReader.Item(System.String)">
            <summary>
            Gets value by column name
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Advances to the next record
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataReader.NextResultAsync(System.Threading.CancellationToken)">
            <summary>
            Advances to the next result set
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataReader.GetName(System.Int32)">
            <summary>
            Gets column name by index
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataReader.GetOrdinal(System.String)">
            <summary>
            Gets column index by name
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets data type of column
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataReader.GetOracleDbType(System.Int32)">
            <summary>
            Gets Oracle-specific data type
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataReader.GetFieldValue``1(System.Int32)">
            <summary>
            Gets value as specific type
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets value as specific type asynchronously
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataReader.IsDBNull(System.Int32)">
            <summary>
            Checks if column value is null
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.IOracleDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if column value is null asynchronously
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.OracleDbType">
            <summary>
            Oracle database types enumeration
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ConnectionState">
            <summary>
            Connection state enumeration
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.CommandType">
            <summary>
            Command type enumeration
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.CommandBehavior">
            <summary>
            Command behavior enumeration
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ParameterDirection">
            <summary>
            Parameter direction enumeration
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.IsolationLevel">
            <summary>
            Transaction isolation level enumeration
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ConnectionTestResult">
            <summary>
            Connection test result
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ConnectionTestResult.#ctor(System.Boolean,System.TimeSpan,System.String,System.DateTime)">
            <summary>
            Connection test result
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.DatabaseInfo">
            <summary>
            Database information
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.DatabaseInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.DateTime,System.TimeSpan)">
            <summary>
            Database information
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.HealthCheckResult">
            <summary>
            Health check result
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.HealthCheckResult.#ctor(System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{System.String},System.DateTime)">
            <summary>
            Health check result
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ISelectionService">
            <summary>
            Abstraction for AutoCAD selection operations
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionService.GetSelectionAsync(System.String)">
            <summary>
            Prompts user to select entities
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionService.SelectByCriteriaAsync(ALARM.Core.Interfaces.SelectionCriteria)">
            <summary>
            Selects entities by criteria without user interaction
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionService.SelectAllAsync">
            <summary>
            Selects all entities in the drawing
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionService.SelectWindowAsync(ALARM.Core.Interfaces.Point3D,ALARM.Core.Interfaces.Point3D)">
            <summary>
            Selects entities within a window
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionService.SelectCrossingAsync(ALARM.Core.Interfaces.Point3D,ALARM.Core.Interfaces.Point3D)">
            <summary>
            Selects entities crossing a window
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionService.ClearSelectionAsync">
            <summary>
            Clears the current selection
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionService.HighlightSelectionAsync(ALARM.Core.Interfaces.ISelectionSet,System.Boolean)">
            <summary>
            Highlights the selected entities
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ISelectionSet">
            <summary>
            Represents a set of selected entities
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.ISelectionSet.Count">
            <summary>
            Number of selected entities
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.ISelectionSet.Item(System.Int32)">
            <summary>
            Gets entity at specified index
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionSet.Add(ALARM.Core.Interfaces.ObjectId)">
            <summary>
            Adds an entity to the selection
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionSet.Remove(ALARM.Core.Interfaces.ObjectId)">
            <summary>
            Removes an entity from the selection
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionSet.Clear">
            <summary>
            Clears all selected entities
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionSet.Contains(ALARM.Core.Interfaces.ObjectId)">
            <summary>
            Checks if an entity is selected
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionSet.ToArray">
            <summary>
            Gets all object IDs as an array
            </summary>
        </member>
        <member name="M:ALARM.Core.Interfaces.ISelectionSet.GetEntitiesAsync(ALARM.Core.Interfaces.IAcadTransaction)">
            <summary>
            Gets the entities as a list
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.SelectionCriteria">
            <summary>
            Criteria for entity selection
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.SelectionCriteria.EntityTypes">
            <summary>
            Entity types to include
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.SelectionCriteria.LayerNames">
            <summary>
            Layer names to include
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.SelectionCriteria.PropertyFilters">
            <summary>
            Property filters
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.SelectionCriteria.BoundingBox">
            <summary>
            Bounding box to limit selection
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.SelectionCriteria.IncludeLockedLayers">
            <summary>
            Whether to include locked layers
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.SelectionCriteria.IncludeFrozenLayers">
            <summary>
            Whether to include frozen layers
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.SelectionCriteria.IncludeInvisible">
            <summary>
            Whether to include invisible entities
            </summary>
        </member>
        <member name="P:ALARM.Core.Interfaces.SelectionCriteria.MaxCount">
            <summary>
            Maximum number of entities to select (0 = unlimited)
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.SelectionMode">
            <summary>
            Selection mode enumeration
            </summary>
        </member>
        <member name="F:ALARM.Core.Interfaces.SelectionMode.Pick">
            <summary>
            User picks individual entities
            </summary>
        </member>
        <member name="F:ALARM.Core.Interfaces.SelectionMode.Window">
            <summary>
            Window selection (entities completely inside)
            </summary>
        </member>
        <member name="F:ALARM.Core.Interfaces.SelectionMode.Crossing">
            <summary>
            Crossing selection (entities crossing or inside)
            </summary>
        </member>
        <member name="F:ALARM.Core.Interfaces.SelectionMode.Fence">
            <summary>
            Fence selection (entities crossing a line)
            </summary>
        </member>
        <member name="F:ALARM.Core.Interfaces.SelectionMode.Polygon">
            <summary>
            Polygon selection
            </summary>
        </member>
        <member name="F:ALARM.Core.Interfaces.SelectionMode.All">
            <summary>
            All entities in drawing
            </summary>
        </member>
        <member name="F:ALARM.Core.Interfaces.SelectionMode.Last">
            <summary>
            Last created entity
            </summary>
        </member>
        <member name="F:ALARM.Core.Interfaces.SelectionMode.Previous">
            <summary>
            Previous selection set
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.SelectionEventArgs">
            <summary>
            Selection event arguments
            </summary>
        </member>
        <member name="T:ALARM.Core.Interfaces.ISelectionEvents">
            <summary>
            Selection service events
            </summary>
        </member>
        <member name="E:ALARM.Core.Interfaces.ISelectionEvents.SelectionChanged">
            <summary>
            Raised when selection changes
            </summary>
        </member>
        <member name="E:ALARM.Core.Interfaces.ISelectionEvents.SelectionCleared">
            <summary>
            Raised when selection is cleared
            </summary>
        </member>
        <member name="E:ALARM.Core.Interfaces.ISelectionEvents.SelectionStarted">
            <summary>
            Raised when selection operation starts
            </summary>
        </member>
        <member name="E:ALARM.Core.Interfaces.ISelectionEvents.SelectionCompleted">
            <summary>
            Raised when selection operation completes
            </summary>
        </member>
    </members>
</doc>
