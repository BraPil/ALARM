# ADDS25 Test Computer Automated CI System
# Purpose: Listen for fix commits, auto-pull, test, and push results
# Environment: Test Computer (wa-bdpilegg)
# Date: September 1, 2025

Write-Host "üß™ ADDS25 Test Computer Automated CI System Starting..." -ForegroundColor Cyan
Write-Host "This system will monitor GitHub for fixes and auto-test ADDS25" -ForegroundColor Yellow

# Configuration
$repoPath = "C:\Users\wa-bdpilegg\Downloads\ALARM"
$testResultsPath = "$repoPath\test-results"
$ciLogPath = "$repoPath\ci\logs"

# Ensure directories exist
if (!(Test-Path $ciLogPath)) { New-Item $ciLogPath -Type Directory -Force | Out-Null }
if (!(Test-Path $testResultsPath)) { New-Item $testResultsPath -Type Directory -Force | Out-Null }

# Initialize CI logging
$timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
$ciLog = "$ciLogPath\test-ci-session-$timestamp.md"

@"
# ADDS25 Test Computer CI Session

**Session Start**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
**Environment**: Test Computer (wa-bdpilegg)
**Repository**: C:\Users\wa-bdpilegg\Downloads\ALARM
**ADDS25 Path**: $repoPath\tests\ADDS25\v0.1

---

## üß™ **AUTOMATED TESTING LOG**

"@ | Out-File $ciLog -Encoding UTF8

function Write-TestLog {
    param([string]$Message, [string]$Level = "INFO")
    $logEntry = "[$(Get-Date -Format 'HH:mm:ss')] [$Level] $Message"
    Write-Host $logEntry -ForegroundColor $(switch($Level) { "ERROR" { "Red" } "SUCCESS" { "Green" } "WARNING" { "Yellow" } default { "White" } })
    Add-Content $ciLog $logEntry -Encoding UTF8
}

# Function: Execute ADDS25 launcher with comprehensive logging
function Invoke-ADDS25Testing {
    Write-TestLog "üöÄ Starting ADDS25 automated testing..." "INFO"
    
    $adds25Path = "$repoPath\tests\ADDS25\v0.1"
    
    if (!(Test-Path $adds25Path)) {
        Write-TestLog "‚ùå ADDS25 directory not found: $adds25Path" "ERROR"
        return $false
    }
    
    Set-Location $adds25Path
    Write-TestLog "üìç Navigated to: $(Get-Location)" "INFO"
    
    # Verify launcher exists
    if (!(Test-Path "ADDS25-Launcher.bat")) {
        Write-TestLog "‚ùå ADDS25-Launcher.bat not found" "ERROR"
        return $false
    }
    
    Write-TestLog "üéØ Executing ADDS25-Launcher.bat..." "INFO"
    
    try {
        # Execute the launcher (it has integrated logging now)
        $launcherOutput = & ".\ADDS25-Launcher.bat" 2>&1 | Out-String
        
        Write-TestLog "‚úÖ Launcher execution completed" "SUCCESS"
        Write-TestLog "üìä Output length: $($launcherOutput.Length) characters" "INFO"
        
        # Check for success indicators
        $success = $false
        if ($launcherOutput -match "BUILD SUCCESSFUL|‚úÖ.*Build.*successful") {
            Write-TestLog "‚úÖ Build success detected in output" "SUCCESS"
            $success = $true
        } elseif ($launcherOutput -match "Build FAILED|‚ùå.*Build") {
            Write-TestLog "‚ùå Build failure detected in output" "ERROR"
        }
        
        # Check for AutoCAD launch
        $autocadProcess = Get-Process -Name "acad" -ErrorAction SilentlyContinue
        if ($autocadProcess) {
            Write-TestLog "‚úÖ AutoCAD process detected (PID: $($autocadProcess.Id))" "SUCCESS"
        } else {
            Write-TestLog "‚ö†Ô∏è AutoCAD process not detected" "WARNING"
        }
        
        return $success
        
    } catch {
        Write-TestLog "‚ùå Launcher execution failed: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

# Function: Collect and prepare test results
function Collect-TestResults {
    Write-TestLog "üìä Collecting test results..." "INFO"
    
    # Find the latest test results generated by the launcher
    $latestResults = Get-ChildItem "C:\Users\wa-bdpilegg\Downloads\ADDS25-Test-Results\launcher-execution-*.md" -ErrorAction SilentlyContinue | 
                     Sort-Object LastWriteTime | Select-Object -Last 1
    
    if ($latestResults) {
        Write-TestLog "üìÑ Latest test results: $($latestResults.Name)" "INFO"
        
        # Copy to repository test-results directory for GitHub upload
        $targetFile = "$testResultsPath\$($latestResults.Name)"
        Copy-Item $latestResults.FullName $targetFile -Force
        
        Write-TestLog "‚úÖ Test results copied to repository: $targetFile" "SUCCESS"
        return $targetFile
    } else {
        Write-TestLog "‚ùå No test results found" "ERROR"
        return $null
    }
}

# Function: Push test results to GitHub
function Push-TestResults {
    param([string]$TestResultFile)
    
    if (!$TestResultFile -or !(Test-Path $TestResultFile)) {
        Write-TestLog "‚ùå No valid test results to push" "ERROR"
        return
    }
    
    Write-TestLog "üì§ Pushing test results to GitHub..." "INFO"
    
    Set-Location $repoPath
    
    try {
        # Stage test results
        git add test-results/
        
        # Create commit with timestamp
        $commitMessage = "ADDS25 Test Results - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        git commit -m $commitMessage
        
        # Push to GitHub
        git push origin main
        
        Write-TestLog "‚úÖ Test results pushed to GitHub successfully" "SUCCESS"
        
    } catch {
        Write-TestLog "‚ùå Failed to push test results: $($_.Exception.Message)" "ERROR"
    }
}

# Function: Monitor GitHub for code changes
function Start-GitHubMonitoring {
    Write-TestLog "üëÅÔ∏è Starting GitHub monitoring for code changes..." "INFO"
    
    $lastCommit = ""
    
    while ($true) {
        try {
            # Pull latest changes
            Set-Location $repoPath
            $pullOutput = git pull origin main 2>&1
            
            # Check for new commits
            $currentCommit = git rev-parse HEAD
            
            if ($currentCommit -ne $lastCommit) {
                Write-TestLog "üîî New commit detected: $currentCommit" "INFO"
                Write-TestLog "üì• Pull output: $pullOutput" "INFO"
                
                # Check if this was a fix commit (not a test result commit)
                $commitMessage = git log -1 --pretty=format:"%s"
                
                if ($commitMessage -notmatch "Test Results" -and $commitMessage -match "ADDS25|Automated.*Fix|CI.*Fix") {
                    Write-TestLog "üîß Fix commit detected: $commitMessage" "INFO"
                    
                    # Wait a moment for file system to settle
                    Start-Sleep -Seconds 5
                    
                    # Run automated testing
                    $testSuccess = Invoke-ADDS25Testing
                    
                    # Collect test results
                    $testResultFile = Collect-TestResults
                    
                    # Push results back to GitHub
                    if ($testResultFile) {
                        Push-TestResults -TestResultFile $testResultFile
                        Write-TestLog "üîÑ Test cycle complete. Results pushed for analysis." "SUCCESS"
                    }
                    
                } else {
                    Write-TestLog "‚ÑπÔ∏è Skipping test - commit appears to be test results or unrelated" "INFO"
                }
                
                $lastCommit = $currentCommit
            }
            
            # Wait 30 seconds before next check
            Start-Sleep -Seconds 30
            
        } catch {
            Write-TestLog "‚ùå Error in monitoring loop: $($_.Exception.Message)" "ERROR"
            Start-Sleep -Seconds 60
        }
    }
}

# Function: Initial setup and validation
function Initialize-TestEnvironment {
    Write-TestLog "üîß Initializing test environment..." "INFO"
    
    # Verify repository
    if (!(Test-Path "$repoPath\.git")) {
        Write-TestLog "‚ùå Not a valid Git repository: $repoPath" "ERROR"
        return $false
    }
    
    # Verify ADDS25 installation
    $adds25Path = "$repoPath\tests\ADDS25\v0.1"
    if (!(Test-Path $adds25Path)) {
        Write-TestLog "‚ùå ADDS25 not found: $adds25Path" "ERROR"
        return $false
    }
    
    # Verify AutoCAD installation
    $autocadPaths = @(
        "C:\Program Files\Autodesk\AutoCAD 2025",
        "C:\Program Files\Autodesk\AutoCAD Map 3D 2025"
    )
    
    $autocadFound = $false
    foreach ($path in $autocadPaths) {
        if (Test-Path $path) {
            Write-TestLog "‚úÖ AutoCAD found: $path" "SUCCESS"
            $autocadFound = $true
            break
        }
    }
    
    if (!$autocadFound) {
        Write-TestLog "‚ö†Ô∏è AutoCAD installation not found in standard locations" "WARNING"
    }
    
    # Verify .NET installation
    try {
        $dotnetVersion = dotnet --version
        Write-TestLog "‚úÖ .NET Version: $dotnetVersion" "SUCCESS"
    } catch {
        Write-TestLog "‚ùå .NET not found or not working" "ERROR"
        return $false
    }
    
    Write-TestLog "‚úÖ Test environment initialization complete" "SUCCESS"
    return $true
}

# Main execution
Write-TestLog "üéØ ADDS25 Test Computer Automated CI System Initialized" "SUCCESS"
Write-TestLog "üìÅ Repository: $repoPath" "INFO"
Write-TestLog "üß™ Test Results Path: $testResultsPath" "INFO"
Write-TestLog "üìù CI Log: $ciLog" "INFO"

# Initialize environment
if (!(Initialize-TestEnvironment)) {
    Write-TestLog "‚ùå Environment initialization failed. Exiting." "ERROR"
    exit 1
}

Write-Host ""
Write-Host "üß™ Starting automated testing system..." -ForegroundColor Green
Write-Host "This system will:" -ForegroundColor Yellow
Write-Host "  1. Monitor GitHub for fix commits" -ForegroundColor White
Write-Host "  2. Automatically pull latest changes" -ForegroundColor White
Write-Host "  3. Run ADDS25-Launcher.bat with full logging" -ForegroundColor White
Write-Host "  4. Collect and analyze test results" -ForegroundColor White
Write-Host "  5. Push results back to GitHub" -ForegroundColor White
Write-Host "  6. Wait for dev computer analysis and repeat" -ForegroundColor White
Write-Host ""

# Start the monitoring loop
Start-GitHubMonitoring
